asyncapi: 2.6.0
info:
  title: WebSocket definition for JChess
  version: '0.1.0'
servers:
  backend:
    url: "127.0.0.1:8880"
    protocol: ws
    description: The Java Backend (Undertow)
defaultContentType: "application/json"
channels:
  api/board/update:
    subscribe:
      summary: Used by the frontend to register with the backend
      operationId: onBoardUpdateSubscribe
      message:
        name: BoardUpdateSubscribe
        messageId: BoardUpdateSubscribe
        payload:
          $ref: "./schema/message/BoardUpdateSubscribe.schema.json"
    publish:
      summary: Used by the backend to push game state changes to the clients
      operationId: onBoardUpdate
      message:
        name: BoardUpdate
        messageId: BoardUpdate
        payload:
          $ref: "./schema/message/GameUpdate.schema.json"

  api/pieceSelection:
    subscribe:
      summary: Used by the frontend to subscribe to the channel / and notify the backend of a selected piece
      operationId: onPieceSelectionSubscribe
      message:
        name: PieceSelectionSubscribe
        messageId: PieceSelectionSubscribe
        payload:
          oneOf:
            - type: object
              properties:
                msgType:
                  enum:
                    - "subscribe"
                sessionId:
                  type: string
                  description: the sessionId of the game instance to register with
            - type: object
              properties:
                msgType:
                  enum:
                    - "pieceSelected"
                data:
                  $ref: "./schema/message/PieceSelected.schema.json"
    publish:
      summary: Used by the backend to notify the frontend that it should display a PieceSelection window
      operationId: onOfferPieceSelection
      message:
        name: OfferPieceSelection
        messageId: OfferPieceSelection
        payload:
          $ref: "./schema/message/OfferPieceSelection.schema.json"

  api/chat:
    subscribe:
      summary: Used by the frontend to (subscribe to the channel / and notify the backend of a new chat message)
      operationId: onChatSubscribe
      message:
        name: ChatSubscribe
        messageId: ChatSubscribe
        payload:
          oneOf:
            - type: object
              properties:
                msgType:
                  enum:
                    - "subscribe"
                sessionId:
                  type: string
                  description: the sessionId of the game instance to register with
                userName:
                  type: string
                  description: userName associated with the registering player
            - type: object
              properties:
                msgType:
                  enum:
                    - "submit"
                data:
                  type: string
                  description: text content of the chat message
    publish:
      summary: Used by the backend to (send all "old" messages on first subscription / send newly received messages)
      operationId: onChatSend
      message:
        name: ChatSend
        messageId: ChatSend
        payload:
          type: array
          items:
            $ref: "./schema/message/ChatMessage.schema.json"
